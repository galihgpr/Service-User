// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	view "alta-test/view"
)

// ServiceUser is an autogenerated mock type for the ServiceUser type
type ServiceUser struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: newUser
func (_m *ServiceUser) CreateUser(newUser view.AddUser) (view.RespondUser, error) {
	ret := _m.Called(newUser)

	var r0 view.RespondUser
	if rf, ok := ret.Get(0).(func(view.AddUser) view.RespondUser); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(view.RespondUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(view.AddUser) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserID provides a mock function with given fields: id
func (_m *ServiceUser) DeleteUserID(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: name, role, sort, sizePage, page
func (_m *ServiceUser) GetAllUsers(name string, role string, sort string, sizePage int, page int) ([]view.RespondUser, error) {
	ret := _m.Called(name, role, sort, sizePage, page)

	var r0 []view.RespondUser
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) []view.RespondUser); ok {
		r0 = rf(name, role, sort, sizePage, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]view.RespondUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(name, role, sort, sizePage, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields: id, role
func (_m *ServiceUser) GetUserID(id uint, role string) (view.RespondUser, error) {
	ret := _m.Called(id, role)

	var r0 view.RespondUser
	if rf, ok := ret.Get(0).(func(uint, string) view.RespondUser); ok {
		r0 = rf(id, role)
	} else {
		r0 = ret.Get(0).(view.RespondUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(id, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserLogin provides a mock function with given fields: login
func (_m *ServiceUser) GetUserLogin(login view.Login) (view.RespondUser, error) {
	ret := _m.Called(login)

	var r0 view.RespondUser
	if rf, ok := ret.Get(0).(func(view.Login) view.RespondUser); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Get(0).(view.RespondUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(view.Login) error); ok {
		r1 = rf(login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserID provides a mock function with given fields: id, update
func (_m *ServiceUser) UpdateUserID(id uint, update view.UpdateUser) (view.RespondUser, error) {
	ret := _m.Called(id, update)

	var r0 view.RespondUser
	if rf, ok := ret.Get(0).(func(uint, view.UpdateUser) view.RespondUser); ok {
		r0 = rf(id, update)
	} else {
		r0 = ret.Get(0).(view.RespondUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, view.UpdateUser) error); ok {
		r1 = rf(id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewServiceUserT interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceUser creates a new instance of ServiceUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceUser(t NewServiceUserT) *ServiceUser {
	mock := &ServiceUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
