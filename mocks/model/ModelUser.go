// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "alta-test/entities"

	mock "github.com/stretchr/testify/mock"

	view "alta-test/view"
)

// ModelUser is an autogenerated mock type for the ModelUser type
type ModelUser struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: newUser
func (_m *ModelUser) CreateUser(newUser entities.User) (entities.User, error) {
	ret := _m.Called(newUser)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserID provides a mock function with given fields: id
func (_m *ModelUser) DeleteUserID(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: name, role, sort, sizePage, page
func (_m *ModelUser) GetAllUsers(name string, role string, sort string, sizePage int, page int) ([]entities.User, error) {
	ret := _m.Called(name, role, sort, sizePage, page)

	var r0 []entities.User
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) []entities.User); ok {
		r0 = rf(name, role, sort, sizePage, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(name, role, sort, sizePage, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields: id, role
func (_m *ModelUser) GetUserID(id uint, role string) (entities.User, error) {
	ret := _m.Called(id, role)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(uint, string) entities.User); ok {
		r0 = rf(id, role)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(id, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserLogin provides a mock function with given fields: login
func (_m *ModelUser) GetUserLogin(login view.Login) (entities.User, error) {
	ret := _m.Called(login)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(view.Login) entities.User); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(view.Login) error); ok {
		r1 = rf(login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserID provides a mock function with given fields: id, update
func (_m *ModelUser) UpdateUserID(id uint, update entities.User) (entities.User, error) {
	ret := _m.Called(id, update)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(uint, entities.User) entities.User); ok {
		r0 = rf(id, update)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, entities.User) error); ok {
		r1 = rf(id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewModelUserT interface {
	mock.TestingT
	Cleanup(func())
}

// NewModelUser creates a new instance of ModelUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewModelUser(t NewModelUserT) *ModelUser {
	mock := &ModelUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
